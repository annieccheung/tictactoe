// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var BoardCtrl,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.ticTacToe = angular.module('TicTacToe', []);

  ticTacToe.constant('Settings', {
    WIN_PATTERNS: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
  });

  BoardCtrl = (function() {
    function BoardCtrl($scope, Settings) {
      this.$scope = $scope;
      this.Settings = Settings;
      this.parseBoard = __bind(this.parseBoard, this);
      this.mark = __bind(this.mark, this);
      this.announceWinner = __bind(this.announceWinner, this);
      this.player = __bind(this.player, this);
      this.numberofMoves = __bind(this.numberofMoves, this);
      this.resetBoard = __bind(this.resetBoard, this);
      this.someoneWon = __bind(this.someoneWon, this);
      this.getRow = __bind(this.getRow, this);
      this.getPatterns = __bind(this.getPatterns, this);
      this.$scope.cells = {};
      this.$scope.patternsToTest = this.getPatterns();
      this.$scope.mark = this.mark;
      console.log(this.$scope.patternsToTest);
    }

    BoardCtrl.prototype.getPatterns = function() {
      return this.Settings.WIN_PATTERNS.filter(function() {
        return true;
      });
    };

    BoardCtrl.prototype.getRow = function(pattern) {
      var c, c0, c1, c2;
      c = this.$scope.cells;
      c0 = c[pattern[0]];
      c1 = c[pattern[1]];
      c2 = c[pattern[2]];
      return "" + c0 + c1 + c2;
    };

    BoardCtrl.prototype.someoneWon = function(row) {
      return 'xxx' === row || 'ooo' === row;
    };

    BoardCtrl.prototype.resetBoard = function() {
      return this.$scope.cells = {};
    };

    BoardCtrl.prototype.numberofMoves = function() {
      return Object.keys(this.$scope.cells).length;
    };

    BoardCtrl.prototype.player = function(options) {
      var moves, whoMovedLast;
      options || (options = whoMovedLast = false);
      moves = this.numberofMoves() - (options.whoMovedLast ? 1 : 0);
      if (moves % 2 === 0) {
        return 'x';
      } else {
        return 'o';
      }
    };

    BoardCtrl.prototype.announceWinner = function() {
      var winner;
      winner = this.player({
        whoMovedLast: true
      });
      return alert("" + winner + " wins!");
    };

    BoardCtrl.prototype.mark = function($event) {
      var cell;
      this.$event = $event;
      cell = this.$event.target.dataset.index;
      this.$scope.cells[cell] = this.player();
      return this.parseBoard();
    };

    BoardCtrl.prototype.parseBoard = function() {
      return this.$scope.patternsToTest = this.$scope.patternsToTest.filter((function(_this) {
        return function(pattern) {
          var row;
          row = _this.getRow(pattern);
          if (_this.someoneWon(row)) {
            _this.announceWinner();
          }
          return true;
        };
      })(this));
    };

    return BoardCtrl;

  })();

  BoardCtrl.$inject = ["$scope", "Settings"];

  ticTacToe.controller("BoardCtrl", BoardCtrl);

}).call(this);

//# sourceMappingURL=application.map
